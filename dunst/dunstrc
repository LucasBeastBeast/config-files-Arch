# See dunst(5) for all configuration options

[global]
    ### Display ###
	
	# display on the monitor with keyboard focus
    follow = keyboard

    ### Geometry ###

    # set width range and maximum height
    width = (170, 450)
    height = 140

    # display on bottom right corner
    origin = bottom-right

    # offset from the origin
    offset = 10x50

    # auto-detect scale factor
    scale = 0

    # Maximum number of notification (0 means no limit)
    notification_limit = 4

    ### Progress bar ###

    # turn on the progress bar
    progress_bar = true

    # set the progress bar height
	progress_bar_height = 10

    # set the frame width of the progress bar
    progress_bar_frame_width = 1

    # set the minimum and maximum width for the progress bar
    progress_bar_min_width = 120
    progress_bar_max_width = 410

    # set sharp edges for the progress bar
    progress_bar_corner_radius = 0

    # set corner radius for the icon image.
    icon_corner_radius = 30
    icon_corners = "top-right, bottom-left"

    # show how many messages are currently hidden
    indicate_hidden = yes

	# set transparency
	transparency = 30

    # set padding between text and separator.
    padding = 17

    # set horizontal padding.
    horizontal_padding = 17

    # set padding between text and icon.
    text_icon_padding = 0

    # set border frame
    frame_width = 1
	frame_color = "#ffffff"

    # set gap size between notifications
	gap_size = 11

    # set most recent notifications at the top
    sort = update

    # time out notification even when idle
	idle_threshold = 0

    ### Text ###

    font = ProFont IIx Nerd Font Mono 10

	# set spacing between lines to the font height
    line_height = 0

	# allow html markup styled notifications
    markup = full

    # The format of the message.  Possible variables are:
    #   %a  appname
    #   %s  summary
    #   %b  body
    #   %i  iconname (including its path)
    #   %I  iconname (without its path)
    #   %p  progress value if set ([  0%] to [100%]) or nothing
    #   %n  progress value if set without any extra characters
    #   %%  Literal %
    # Markup is allowed
    format = "<b>%s</b>\n%b"

    # align the text
	alignment = left
    vertical_alignment = center

	# don't show age of the message
    show_age_threshold = -1

    # Specify where to make an ellipsis in long lines.
    # Possible values are "start", "middle" and "end".
    ellipsize = middle

    # don't ignore newlines
    ignore_newline = no

    # stack notifications with the same content
    stack_duplicates = true

    # show the count of stacked notifications with the same content
    hide_duplicate_count = false

    # display indicators for URLs (U) and actions (A).
    show_indicators = yes

    ### Icons ###

    # Recursive icon lookup. You can set a single theme, instead of having to
    # define all lookup paths.
    enable_recursive_icon_lookup = true

    # set icon theme (only used for recursive icon lookup)
    icon_theme = Adwaita

    # align icons left
    icon_position = left

    # set icon size
    min_icon_size = 100
    max_icon_size = 100

    # Paths to default icons (only necessary when not using recursive icon lookup)
    icon_path = /usr/share/icons/gnome/16x16/status/:/usr/share/icons/gnome/16x16/devices/

    ### History ###

    # disable timeout for notification popped up from history
    sticky_history = yes

    # set maximum amount of notifications kept in history
    history_length = 20

    ### Misc/Advanced ###

    # dmenu
    dmenu = /sbin/dmenu -p dunst:

    # browser
    browser = /sbin/firefox

    # always run rule-defined scripts, even if the notification is suppressed
    always_run_script = true

    # define title and class of the windows spawned by dunst (X11 only)
    title = Dunst
    class = Dunst

	# set sharp edges of the notification window
    corner_radius = 0

    # Ignore the dbus closeNotification message.
    # Useful to enforce the timeout set by dunst configuration. Without this
    # parameter, an application may close the notification sent before the
    # user defined timeout.
    ignore_dbusclose = false

    ### Legacy

    # Use the Xinerama extension instead of RandR for multi-monitor support.
    # This setting is provided for compatibility with older nVidia drivers that
    # do not support RandR and using it on systems that support RandR is highly
    # discouraged.
    #
    # By enabling this setting dunst will not be able to detect when a monitor
    # is connected or disconnected which might break follow mode if the screen
    # layout changes.
    force_xinerama = false

    ### mouse

	# remove the notification on left click
    mouse_left_click = close_current

	# invoke action if not open context menu on right click
    mouse_right_click = do_action

# Experimental features that may or may not work correctly. Do not expect them
# to have a consistent behaviour across releases.
[experimental]
    # Calculate the dpi to use on a per-monitor basis.
    # If this setting is enabled the Xft.dpi value will be ignored and instead
    # dunst will attempt to calculate an appropriate dpi value for each monitor
    # using the resolution and physical size. This might be useful in setups
    # where there are multiple screens with very different dpi values.
    per_monitor_dpi = false


[urgency_low]
    # IMPORTANT: colors have to be defined in quotation marks.
    # Otherwise the "#" and following would be interpreted as a comment.
    background = "#000000"
    foreground = "#ffffff"
    timeout = 10
    # Icon for notifications with low urgency, uncomment to enable
    #default_icon = /path/to/icon

[urgency_normal]
    background = "#000000"
    foreground = "#ffffff"
    timeout = 10
    override_pause_level = 30
    # Icon for notifications with normal urgency, uncomment to enable
    #default_icon = /path/to/icon

[urgency_critical]
    background = "#900000"
    foreground = "#ffffff"
    timeout = 0
    override_pause_level = 60
    # Icon for notifications with critical urgency, uncomment to enable
    #default_icon = /path/to/icon

# Every section that isn't one of the above is interpreted as a rules to
# override settings for certain messages.
#
# Messages can be matched by
#    appname (discouraged, see desktop_entry)
#    body
#    category
#    desktop_entry
#    icon
#    match_transient
#    msg_urgency
#    stack_tag
#    summary
#
# and you can override the
#    background
#    foreground
#    format
#    frame_color
#    fullscreen
#    new_icon
#    set_stack_tag
#    set_transient
#    set_category
#    timeout
#    urgency
#    icon_position
#    skip_display
#    history_ignore
#    action_name
#    word_wrap
#    ellipsize
#    alignment
#    hide_text
#    override_pause_level
#
# Shell-like globbing will get expanded.
#
# Instead of the appname filter, it's recommended to use the desktop_entry filter.
# GLib based applications export their desktop-entry name. In comparison to the appname,
# the desktop-entry won't get localized.
#
# You can also allow a notification to appear even when paused. Notification will appear whenever notification's override_pause_level >= dunst's paused level.
# This can be used to set partial pause modes, where more urgent notifications get through, but less urgent stay paused. To do that, you can override the following in the rules:
# override_pause_level = X

# SCRIPTING
# You can specify a script that gets run when the rule matches by
# setting the "script" option.
# The script will be called as follows:
#   script appname summary body icon urgency
# where urgency can be "LOW", "NORMAL" or "CRITICAL".
#
# NOTE: It might be helpful to run dunst -print in a terminal in order
# to find fitting options for rules.

# Disable the transient hint so that idle_threshold cannot be bypassed from the
# client
#[transient_disable]
#    match_transient = yes
#    set_transient = no
#
# Make the handling of transient notifications more strict by making them not
# be placed in history.
#[transient_history_ignore]
#    match_transient = yes
#    history_ignore = yes

# fullscreen values
# show: show the notifications, regardless if there is a fullscreen window opened
# delay: displays the new notification, if there is no fullscreen window active
#        If the notification is already drawn, it won't get undrawn.
# pushback: same as delay, but when switching into fullscreen, the notification will get
#           withdrawn from screen again and will get delayed like a new notification
#[fullscreen_delay_everything]
#    fullscreen = delay
#[fullscreen_show_critical]
#    msg_urgency = critical
#    fullscreen = show

#[espeak]
#    summary = "*"
#    script = dunst_espeak.sh

#[script-test]
#    summary = "*script*"
#    script = dunst_test.sh

#[ignore]
#    # This notification will not be displayed
#    summary = "foobar"
#    skip_display = true

#[history-ignore]
#    # This notification will not be saved in history
#    summary = "foobar"
#    history_ignore = yes

#[skip-display]
#    # This notification will not be displayed, but will be included in the history
#    summary = "foobar"
#    skip_display = yes

#[signed_on]
#    appname = Pidgin
#    summary = "*signed on*"
#    urgency = low
#
#[signed_off]
#    appname = Pidgin
#    summary = *signed off*
#    urgency = low
#
#[says]
#    appname = Pidgin
#    summary = *says*
#    urgency = critical
#
#[twitter]
#    appname = Pidgin
#    summary = *twitter.com*
#    urgency = normal
#
#[stack-volumes]
#    appname = "some_volume_notifiers"
#    set_stack_tag = "volume"
#
# vim: ft=cfg
